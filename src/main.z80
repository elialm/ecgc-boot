include "hardware.inc"

; For EFB functions, refer to Using Hardend Control Functions MachXO3D Reference
; https://www.latticesemi.com/-/media/LatticeSemi/Documents/ApplicationNotes/UZ/FPGA-TN-02119-1-3-Using-Hardened-Control-Functions-MachXO3D-Reference.ashx?document_id=52704

; EFB Base address (might change upon firmware revision)
CART_EFB_BASE       equ $A000

; EFB SPI Registers
CART_EFB_SPICR0     equ (CART_EFB_BASE + $54)   ; EFB SPI Control Register 0
CART_EFB_SPICR1     equ (CART_EFB_BASE + $55)   ; EFB SPI Control Register 1
CART_EFB_SPICR2     equ (CART_EFB_BASE + $56)   ; EFB SPI Control Register 2
CART_EFB_SPIBR      equ (CART_EFB_BASE + $57)   ; EFB SPI Clock Pre-scale
CART_EFB_SPICSR     equ (CART_EFB_BASE + $58)   ; EFB SPI Chip Select
CART_EFB_SPITXDR    equ (CART_EFB_BASE + $59)   ; EFB SPI Transmit Data
CART_EFB_SPISR      equ (CART_EFB_BASE + $5A)   ; EFB SPI Status Register
CART_EFB_SPIRXDR    equ (CART_EFB_BASE + $5B)   ; EFB SPI Revieve Data
CART_EFB_SPIIRQ     equ (CART_EFB_BASE + $5C)   ; EFB SPI Interrupt Request
CART_EFB_SPIIRQEN   equ (CART_EFB_BASE + $5D)   ; EFB SPI Interrupt Request Enable

; EFB Flash Registers

; EFB Flash Control
CART_EFB_CFGCR      equ (CART_EFB_BASE + $70)
CART_EFB_CFGCR_WBCE equ 7   ; WISHBONE Connection Enable
CART_EFB_CFGCR_RSTE equ 6   ; WISHBONE Connection Reset

CART_EFB_CFGTXDR    equ (CART_EFB_BASE + $71)   ; EFB Flash Transmit Data
CART_EFB_CFGSR      equ (CART_EFB_BASE + $72)   ; EFB Flash Status
CART_EFB_CFGRXDR    equ (CART_EFB_BASE + $73)   ; EFB Flash Recieve Data
CART_EFB_CFGIRQ     equ (CART_EFB_BASE + $74)   ; EFB Flash Interrupt Request
CART_EFB_CFGIRQEN   equ (CART_EFB_BASE + $75)   ; EFB Flash Interrupt Request Enable

section "Initialisation",rom0[$0150]

; Initialisation
__main::
    di                  ; Disable interrupts
    ld sp, $FFFE        ; Initialise stack pointer

	; Add code here

end:
    halt

flash_cmd_enable_cfg:
    db $74,$08,$00,$00
flash_cmd_poll_status:
    db $3C,$00,$00,$00
flash_cmd_set_ufm0_addr:
    db $B4,$00,$00,$00
flash_data_ufm0_addr:
    db $00,$01,$00,$00

; Send a command to the EFB Flash
;   hl - pointer to 4-byte command
;        a command should look something like the following in memory
;            $74 $08 $00 $00
;        where the first byte is the command, followed by the 3-byte operand
;
;   Note: does not deassert WBCE in CART_EFB_CFGCR
;
;   Uses bc
efb_flash_cmd:
    ; Enable WishBone connection
    ld a, (1 << CART_EFB_CFGCR_WBCE)
    ld [CART_EFB_CFGCR], a

    ; Send command
    ld d, 4
    call efb_flash_write

    ret

; Write bytes to flash tx register
;   hl - pointer to data being writtten
;   d - number of bytes to write (must be > 0)
efb_flash_write:
    ld bc, CART_EFB_CFGTXDR
.copy_loop:
    ld a, [hl+]
    ld [bc], a
    dec d
    
    jp nz, .copy_loop
    ret

include "boot.inc"
include "ecgc_cart.inc"
include "hardware.inc"
include "macros.inc"

section "Initialisation",rom0[$0150]

; Initialisation
__main::
    di                  ; Disable interrupts
    ld sp, stack_top    ; Initialise stack pointer

    ld a, $01
    ld [rIE], a         ; Enable VBL interrupt
    ei

    ; Disable LCD
    ld hl, rLCDC
    res 7, [hl]

    ; Copy chars to VRAM
    ld hl, chars_data
    ld a, [hl+]
    ld e, a
    ld a, [hl+]
    ld d, a
    ld b, h
    ld c, l
    ld hl, _VRAM
    call memcpy_wd

    ; Copy tile map to VRAM
    LOAD_CELL_SCRN0_HL 0,0
    ld bc, screen_data
    ld e, 18
.screen_copy:
    ld d, 20
    call memcpy

    ; Move hl to point to start of next line
    ld a, e
    ld de, 12
    add hl, de
    ld e, a
    
    ; Check loop counter e
    dec e
    jp nz, .screen_copy

    ; Initialise x coord
    ld a, $0C
    ldh [x_coord], a
    ld a, $06
    ldh [frame_delay], a

    ; Initialise selector location
    ld a, $05
    ldh [cursor_location], a

    ; Initialise previous button state
    ld a, $FF
    ldh [prev_button_state], a

    ; Enable LCD
    ld hl, rLCDC
    set 7, [hl]

    ; Initialise dma_await routine
    call dma_await_init

.frame_tick:
    halt
    nop

    call load_transaction_info
    call handle_button_press

    ; Check frame delay
    ldh a, [frame_delay]
    dec a
    ldh [frame_delay], a
    jp nz, .frame_tick

    ; Reset frame delay
    ld a, $06
    ldh [frame_delay], a

    call update_crawl

    jp .frame_tick

print_transaction_address_data:
    ; Halt till next VBlank, then disable LCD
    halt
    nop
    ld hl, rLCDC
    res 7, [hl]

    ; Scroll the screen
    call scroll_history

    ; Write upper address byte to screen
    LOAD_CELL_SCRN0_HL 1, 1
    ld a, [transaction_address+1]
    ld d, a
    call d2hex
    ld [hl], b
    inc hl
    ld [hl], c
    inc hl

    ; Write lower address byte to screen
    ld a, [transaction_address]
    ld d, a
    call d2hex
    ld [hl], b
    inc hl
    ld [hl], c
    inc hl

    ; Print empty space
    xor a, a
    ld [hl+], a

    ; Write data byte to screen
    ld a, [transaction_data]
    ld d, a
    call d2hex
    ld [hl], b
    inc hl
    ld [hl], c
    inc hl

    ; Print empty space
    xor a, a
    ld [hl+], a

    ret

perform_read_transaction:
    ; Load transaction address to hl
    ld a, [transaction_address]
    ld l, a
    ld a, [transaction_address+1]
    ld h, a

    ; Perform the transaction
    ld a, [hl]
    ld [transaction_data], a

    ; Write transaction address and data to screen
    call print_transaction_address_data

    ; Write 'R' to indicate read
    ld a, "R"
    ld [hl], a

    ; Enable LCD
    ld hl, rLCDC
    set 7, [hl]

    ret

perform_write_transaction:
    ; Load transaction address to hl and data to a
    ld a, [transaction_address]
    ld l, a
    ld a, [transaction_address+1]
    ld h, a

    ; Perform the transaction
    ld a, [transaction_data]
    ld [hl], a

    ; Write transaction address and data to screen
    call print_transaction_address_data

    ; Write 'W' to indicate write
    ld a, "W"
    ld [hl], a

    ; Enable LCD
    ld hl, rLCDC
    set 7, [hl]

    ret

perform_function_call:
    ; Halt till next VBlank, then disable LCD
    halt
    nop
    ld hl, rLCDC
    res 7, [hl]

    ; Display cross after "Fn" on screen
    LOAD_CELL_SCRN0_HL 6,18
    inc [hl]

    ; Enable LCD
    ld hl, rLCDC
    set 7, [hl]

    ; Jump to selected address
    ld a, [transaction_address]
    ld l, a
    ld a, [transaction_address+1]
    ld h, a
    ld a, [transaction_data]
    call jump_to_hl

    ; Write transaction address and data to screen
    call print_transaction_address_data

    ; Write 'C' to indicate function call
    ld a, "C"
    ld [hl], a

    ; Clear cross after "Fn" on screen
    LOAD_CELL_SCRN0_HL 6,18
    dec [hl]

    ; Enable LCD
    ld hl, rLCDC
    set 7, [hl]

    ret

; Jump to the address pointed to by hl
jump_to_hl:
    jp hl
    ret

perform_long_workload:
    ldh a, [transaction_data]
    inc a

.loop
    ; Halt till next VBlank
    halt
    nop

    ; Loop if a != 0
    dec a
    jr nz, .loop

    ret
    
; Load transaction info from screen into RAM
load_transaction_info:
    ld hl, $982F
    call hstr2a
    ldh [transaction_address+1], a
    call hstr2a
    ldh [transaction_address], a
    ld hl, $9871
    call hstr2a
    ldh [transaction_data], a

    ret

; Convert a hex string to its binairy counterpart in a register
;   hl - pointer to the start of the string
;
;   a - will contain the result
hstr2a:
    ld a, [hl+]
    ld b, a
    ld a, [hl+]
    ld c, a
    call hex2d
    ld a, d

    ret

; Scroll history of transactions situated left of the screen
scroll_history::
    ld hl, $9A2A
    ld e, 15
.scroll_loop:
    ld d, 9
    push de
    ld de, $FFB7    ; Decrement to start of 2 lines above
    add hl, de
    ld b, h
    ld c, l         ; bc now contains pointer to start of src line
    ld de, $0020
    add hl, de      ; hl now contains pointer to start of dest line
    pop de
    call memcpy

    dec e           ; Loop counter
    jr nz, .scroll_loop

    ret

handle_button_press:
    ; Read button state and check for press/release events
    call check_button_event

    ; Load selector location pointer
    ldh a, [cursor_location]
    ld c, a
    call get_cursor_pointer

    ; Clear cursor in place
    xor a, a
    ld [hl], a
    ld d, a

    ; Check for left press
    bit 5, b
    jr z, .check_right_press
    dec c
    bit 7, c
    jr z, .done_checking_press
    ld c, $05
    jr .done_checking_press

.check_right_press:
    bit 4, b
    jr z, .check_up_press
    inc c
    ld a, $06
    cp a, c
    jr nz, .done_checking_press
    xor a, a
    ld c, a
    jr .done_checking_press

.check_up_press:
    bit 6, b
    jr z, .check_down_press
    call get_pointer_below_cursor
    ld a, [hl]
    inc a
    ld e, $11
    cp a, e
    jr nz, .skip_value_overflow
    xor a, a
    inc a
.skip_value_overflow:
    ld [hl], a
    jr .done_checking_press

.check_down_press:
    bit 7, b
    jr z, .check_a_press
    call get_pointer_below_cursor
    ld a, [hl]
    dec a
    jr nz, .skip_value_underflow
    ld a, $10
.skip_value_underflow:
    ld [hl], a
    jr .done_checking_press

.check_a_press:
    bit 0, b
    jr z, .check_b_press
    call perform_read_transaction
    ldh a, [cursor_location]    ; Cursor location has not changed
    ld c, a                     ; So load original
    jr .done_checking_press

.check_b_press:
    bit 1, b
    jr z, .check_start_press
    call perform_write_transaction
    ldh a, [cursor_location]    ; Cursor location has not changed
    ld c, a                     ; So load original

.check_start_press:
    bit 3, b
    jr z, .done_checking_press
    call perform_function_call
    ldh a, [cursor_location]    ; Cursor location has not changed
    ld c, a                     ; So load original

.done_checking_press:

    ; Place cursor
    ld a, c
    call get_cursor_pointer
    ld a, $15
    ld [hl], a

    ; Store selector location
    ld a, c
    ldh [cursor_location], a

    ret

; Get one of the VRAM pointers to cursor locations
;   a - must contain the index into `cursor_locations`
;   hl - will contain the pointer after execution
get_cursor_pointer:
    ld hl, cursor_locations
    add a, l
    ld l, a
    jr nc, .skip_high_increment
    inc h
.skip_high_increment
    ld a, [hl]
    ld h, $98
    ld l, a

    ret

; Well, exactly what the name implies
;   hl - must be the pointer to the cursor
;   hl - will contain the aformentioned pointer after execution
get_pointer_below_cursor:
    xor a, a
    ld d, a
    ld e, $20
    add hl, de

    ret

; Update moving char to indicate GameBoy is functioning normally
update_crawl:
    ; Initialise screen pointer
    ld h, $9A
    ldh a, [x_coord]
    ld l, a

    ; Check if coordinate needs to roll over
    xor a, a
    ld [hl], a
    inc l
    ld a, l
    cp a, $13
    jp nz, .skip_rollover

    ld a, $0C
    ld l, a

.skip_rollover:
    ldh [x_coord], a

    ; Write char to screen
    ld a, $01
    ld [hl], a

    ret

; Check for button events
;   b - will contain the same bitmap as a in read_buttons, but set bits are
;       buttons pressed
;   c - will contain the same bitmap as a in read_buttons, but set bits are
;       buttons released
check_button_event:
    call read_buttons
    ld hl, prev_button_state

    ld d, [hl]  ; d holds previous state
    ld [hl], a  ; Save current state for next use
    ld e, a     ; e holds current state

    xor a, d    ; Changed bits will be set
    ld c, a

    and a, d    ; Bits previously set and changed (press)
    ld b, a
    ld a, c
    and a, e    ; Bits previously clear and changed (release)
    ld c, a

    ret

; Read from buttons and store result in a
;   a[7] - Down
;   a[6] - Up
;   a[5] - Left
;   a[4] - Right
;   a[3] - Start
;   a[2] - Select
;   a[1] - B
;   a[0] - A
read_buttons:
    ld hl, rP1

    ; Read from directional buttons
    set 4, [hl]
    ld a, [hl]
    ld a, [hl]
    ld a, [hl]
    and a, $0F
    ld b, a
    res 4, [hl]

    ; Read from action buttons
    set 5, [hl]     
    ld a, [hl]
    ld a, [hl]
    ld a, [hl]
    and a, $0F
    res 5, [hl]

    swap a
    or a, b
    ret

section "Constant data",rom0

cursor_locations:
    db $0F,$10,$11,$12,$51,$52

section "Variable data",hram

x_coord:
    ds 1
frame_delay:
    ds 1
prev_button_state:
    ds 1
cursor_location:
    ds 1
transaction_address:
    ds 2
transaction_data:
    ds 1

; union
; flash_rdata_status:
;     ds 4
; nextu
; flash_rdata_page:
;     ds 16
; endu
include "hardware.inc"

; For EFB functions, refer to Using Hardend Control Functions MachXO3D Reference
; https://www.latticesemi.com/-/media/LatticeSemi/Documents/ApplicationNotes/UZ/FPGA-TN-02119-1-3-Using-Hardened-Control-Functions-MachXO3D-Reference.ashx?document_id=52704

; EFB Base address (might change upon firmware revision)
CART_EFB_BASE       equ $A000

; EFB SPI Registers
CART_EFB_SPICR0     equ (CART_EFB_BASE + $54)   ; EFB SPI Control Register 0
CART_EFB_SPICR1     equ (CART_EFB_BASE + $55)   ; EFB SPI Control Register 1
CART_EFB_SPICR2     equ (CART_EFB_BASE + $56)   ; EFB SPI Control Register 2
CART_EFB_SPIBR      equ (CART_EFB_BASE + $57)   ; EFB SPI Clock Pre-scale
CART_EFB_SPICSR     equ (CART_EFB_BASE + $58)   ; EFB SPI Chip Select
CART_EFB_SPITXDR    equ (CART_EFB_BASE + $59)   ; EFB SPI Transmit Data
CART_EFB_SPISR      equ (CART_EFB_BASE + $5A)   ; EFB SPI Status Register
CART_EFB_SPIRXDR    equ (CART_EFB_BASE + $5B)   ; EFB SPI Revieve Data
CART_EFB_SPIIRQ     equ (CART_EFB_BASE + $5C)   ; EFB SPI Interrupt Request
CART_EFB_SPIIRQEN   equ (CART_EFB_BASE + $5D)   ; EFB SPI Interrupt Request Enable

; EFB Flash Registers

; EFB Flash Control
CART_EFB_CFGCR      equ (CART_EFB_BASE + $70)
CART_EFB_CFGCR_WBCE equ 7   ; WISHBONE Connection Enable
CART_EFB_CFGCR_RSTE equ 6   ; WISHBONE Connection Reset

CART_EFB_CFGTXDR    equ (CART_EFB_BASE + $71)   ; EFB Flash Transmit Data
CART_EFB_CFGSR      equ (CART_EFB_BASE + $72)   ; EFB Flash Status
CART_EFB_CFGRXDR    equ (CART_EFB_BASE + $73)   ; EFB Flash Recieve Data
CART_EFB_CFGIRQ     equ (CART_EFB_BASE + $74)   ; EFB Flash Interrupt Request
CART_EFB_CFGIRQEN   equ (CART_EFB_BASE + $75)   ; EFB Flash Interrupt Request Enable

; Enable WishBone connection
EFB_FLASH_ENABLE: macro
    ld a, (1 << CART_EFB_CFGCR_WBCE)
    ld [CART_EFB_CFGCR], a
endm

; Disable WishBone connection
EFB_FLASH_DISABLE: macro
    xor a,a
    ld [CART_EFB_CFGCR], a
endm

section "Initialisation",rom0[$0150]

; Initialisation
__main::
    di                  ; Disable interrupts
    ld sp, $FFFE        ; Initialise stack pointer

	; Code to read 1 page from UFM0

    EFB_FLASH_ENABLE

    ; Enable WishBone connection
    ld hl, flash_cmd_enable
    ld d, 4
    call efb_flash_write

    EFB_FLASH_DISABLE

.read_status:
    EFB_FLASH_ENABLE

    ; Read status
    ld hl, flash_cmd_status
    ld d, 4
    call efb_flash_write
    ld hl, flash_rdata_status
    ld d, 4
    call efb_flash_read

    EFB_FLASH_DISABLE

    ; Check for busy bit
    ld a, [flash_rdata_status + 2]
    bit 4, a
    jp nz, .read_status

    EFB_FLASH_ENABLE

    ; Set UFM0 address to 0
    ld hl, flash_cmd_set_ufm0_addr
    ld d, 8
    call efb_flash_write

    EFB_FLASH_DISABLE
    EFB_FLASH_ENABLE

    ; Read 1 page of data
    ld hl, flash_cmd_read_page
    ld d, 4
    call efb_flash_write
    ld hl, flash_rdata_page
    ld d, 16
    call efb_flash_read

    EFB_FLASH_DISABLE
    EFB_FLASH_ENABLE

    ; Disable WishBone connection
    ld hl, flash_cmd_disable
    ld d, 3
    call efb_flash_write

    EFB_FLASH_DISABLE
    EFB_FLASH_ENABLE

    ; Send NOOP (necessary after disable)
    ld a, $FF
    ld [CART_EFB_CFGTXDR], a

    EFB_FLASH_DISABLE

    ; At this point, the page data should be at flash_rdata_page

end:
    halt

; Write bytes to flash tx register
;   hl - pointer to data being writtten
;   d - number of bytes to write (must be > 0)
efb_flash_write:
    ld bc, CART_EFB_CFGTXDR
.copy_loop:
    ld a, [hl+]
    ld [bc], a
    dec d
    
    jp nz, .copy_loop
    ret

; Read bytes from flash rx register
;   hl - pointer to writable memory to store the read data
;   d - number of bytes to read (must be > 0)
efb_flash_read:
    ld bc, CART_EFB_CFGRXDR
.copy_loop:
    ld a, [bc]
    ld [hl+], a
    dec d
    
    jp nz, .copy_loop
    ret

section "Flash commands",rom0

flash_cmd_enable:
    db $74,$08,$00,$00
flash_cmd_status:
    db $3C,$00,$00,$00
flash_cmd_set_ufm0_addr:
    db $B4,$00,$00,$00
    db $00,$00,$40,$00
flash_cmd_read_page:
    db $CA,$00,$00,$01
flash_cmd_disable:
    db $26,$00,$00

section "Variable data",wram0

union
flash_rdata_status:
    ds 4
nextu
flash_rdata_page:
    ds 16
endu
include "boot.inc"
include "ecgc_cart.inc"
include "hardware.inc"
include "macros.inc"

def XRAM_TEST_UPPER_BANK = $0400
; def XRAM_TEST_UPPER_BANK = $0004

section "XRAM routines", rom0

xram_start_test::
    ; Initialise error count
    xor a, a
    ld [error_count], a
    ld [error_count+1], a

    ; Initialise abort flag
    ld [xram_test_abort], a

    ; Halt till next VBlank, then disable LCD
    halt
    nop
    ld hl, rLCDC
    res 7, [hl]

    ; Scroll history and empty line
    call scroll_history
    LOAD_CELL_SCRN0_HL 1, 1
    ld d, 9
    xor a, a
    call memset
    call scroll_history

    ; Print error count line
    LOAD_CELL_SCRN0_HL 1, 1
    ld a, "E"
    ld [hl+], a
    ld a, "C"
    ld [hl+], a
    inc hl
    ld a, "0"
    ld d, 4
    call memset

    ; Scroll history to lower error count line
    call scroll_history

    ; Print read progress line
    LOAD_CELL_SCRN0_HL 1, 1
    ld a, "R"
    ld [hl+], a
    ld a, "B"
    ld [hl+], a
    inc hl
    ld a, "0"
    ld d, 4
    call memset

    ; Scroll history to lower read progress line
    call scroll_history

    ; Print write progress line
    LOAD_CELL_SCRN0_HL 1, 1
    ld a, "W"
    ld [hl], a

    ; Scroll history to lower write progress line
    call scroll_history

    ; Print zero progress line
    LOAD_CELL_SCRN0_HL 1, 1
    ld a, "0"
    ld [hl], a

    ; Enable LCD
    ld hl, rLCDC
    set 7, [hl]

    ; ; Set to only update bank counter every 256 loops
    ; ld a, $01
    ; ld [bank_counter_update_skip], a

    ; Set to update bank counter every loop
    xor a, a
    ld [bank_counter_update_skip], a

    ; Run zero write loop
    LOAD_CELL_SCRN0_BC 4, 1
    ; ld de, xram_test_zero_write
    ld de, xram_test_zero_write_no_dma
    call xram_test_loop

    ; Check test abort
    ld a, [xram_test_abort]
    or a, a
    jr nz, .abort_test

    ; ; Set to update bank counter every loop
    ; xor a, a
    ; ld [bank_counter_update_skip], a

    ; Run zero read loop
    LOAD_CELL_SCRN0_BC 4, 3
    ld de, xram_test_zero_read
    call xram_test_loop

    ; Check test abort
    ld a, [xram_test_abort]
    or a, a
    jr nz, .abort_test

    ; Initialise rand routine
    ld a, [xram_test_rand_seed]
    call rand_init

    ; Run random write loop
    LOAD_CELL_SCRN0_BC 4, 2
    ld de, xram_test_random_write
    call xram_test_loop

    ; Check test abort
    ld a, [xram_test_abort]
    or a, a
    jr nz, .abort_test

    ; Initialise rand routine
    ld a, [xram_test_rand_seed]
    call rand_init

    ; Run random read loop
    LOAD_CELL_SCRN0_BC 4, 3
    ld de, xram_test_random_read
    call xram_test_loop

    ; Check test abort
    ld a, [xram_test_abort]
    or a, a
    jr nz, .abort_test

.abort_test:
    ret

; Perform a XRAM test loop
; This will jump to a given routine once for each XRAM bank
; bc - screen location to update the bank counter with
; de - pointer to bank routine
;
; WARNING: the bank routine must not call ret, but jp to
; xram_test_loop.bank_routine_ret
xram_test_loop:
    ; Push arguments to the stack for later use
    push bc
    push de

    ; Initialise loop counter
    xor a, a
    ldh [bank_counter], a
    ldh [bank_counter+1], a

.bank_loop:
    ; Set XRAM bank
    ld a, [bank_counter+1]
    and a, %00000011
    ld [CART_XRAM_CTRL0], a
    ld a, [bank_counter]
    ld [CART_XRAM_CTRL1], a

    ; Check if need to skip bank update
    ld b, a
    ld a, [bank_counter_update_skip]
    or a, a
    jr z, .skip_ff_check
    ld a, $0F
    and a, b
    cp a, $0F
    jr nz, .skip_bank_update

.skip_ff_check:
    ; Update loop status
    LCD_DISABLE

    ; Load bank counter screen location to hl
    ld hl, sp+2
    ld a, [hl+]
    ld b, a
    ld h, [hl]
    ld l, b

    ; Print bank_counter high byte
    ld a, [bank_counter+1]
    ld d, a
    call d2hex
    ld [hl], b
    inc hl
    ld [hl], c
    inc hl

    ; Print bank_counter low byte
    ld a, [bank_counter]
    ld d, a
    call d2hex
    ld [hl], b
    inc hl
    ld [hl], c

    LCD_ENABLE

.skip_bank_update:
    ; Call bank routine pointer stored on the stack
    ld hl, sp+0
    ld a, [hl+]
    ld b, a
    ld h, [hl]
    ld l, b
    jp hl
.bank_routine_ret:

    ; Check test abort
    ld a, [xram_test_abort]
    or a, a
    jr nz, .abort_test

    ; Increment bank counter and check if bank loop still needs to run
    ld hl, bank_counter
    inc [hl]    
    jr nz, .skip_upper_inc
    inc hl
    inc [hl]
    dec hl
.skip_upper_inc:
    ; incremented bank counter is stored to ram
    inc hl
    ld a, high(XRAM_TEST_UPPER_BANK)
    cp a, [hl]
    jr nz, .bank_loop
    dec hl
    ld a, low(XRAM_TEST_UPPER_BANK)
    cp a, [hl]
    jr nz, .bank_loop

.abort_test:

    ; Pop arguments from the stack
    pop de
    pop bc

    ret

xram_test_random_write:
    ; Set XRAM pointer
    ld e, $00
    ld d, $40

    ; Set b for high XRAM pointer check
    ld c, $80

.rng_loop:
    ; Fill bank with random data
    call rand
    ld [de], a
    inc de
    ld a, d
    cp a, c
    jr nz, .rng_loop

    jp xram_test_loop.bank_routine_ret

xram_test_zero_write:
    ; Write 0 to cart_zero
    xor a, a
    ld [cart_zero], a

    ; Set DMA registers
    ld a, (1 << CART_DMA_CFG_DINC)
    ld [CART_DMA_CFG], a
    xor a, a
    ld [CART_DMA_DAL], a
    ld a, $40
    ld [CART_DMA_DAH], a
    ld a, low(cart_zero)
    ld [CART_DMA_SAL], a
    ld a, high(cart_zero)
    ld [CART_DMA_SAH], a

    ; Loop dma_await to write all zero's to the bank
    ld b, $40
.dma_loop
    call dma_await
    dec b
    jp nz, .dma_loop

    jp xram_test_loop.bank_routine_ret

xram_test_zero_write_no_dma:
    ; Set XRAM pointer
    ld l, $00
    ld h, $40

    ; Put $00 in a
    xor a, a
.write_zero_loop:
    ld [hl+], a

    ; Check whether XRAM pointer still points to 0x4000-0x7FFF
    bit 7, h
    jr z, .write_zero_loop

    jp xram_test_loop.bank_routine_ret

xram_test_zero_read:
    ; Set XRAM pointer
    ld l, $00
    ld h, $40

    ; Set b for high XRAM pointer check
    ld b, $80

.read_zero_loop:
    ; Read byte and check if it's zero
    ld a, [hl+]
    or a, a
    jr z, .skip_error_increment

    ; Setup error_result
    ld [error_result+1], a
    xor a, a
    ld [error_result], a

    ; Increment error count on screen
    push bc
    push hl
    call increment_error_count
    pop hl
    pop bc

    ; Check test abort
    ld a, [xram_test_abort]
    or a, a
    jr nz, .abort_test

.skip_error_increment:
    ; Check whether XRAM pointer still points to 0x4000-0x7FFF
    ld a, h
    cp a, b
    jr nz, .read_zero_loop

.abort_test:
    jp xram_test_loop.bank_routine_ret

xram_test_random_read:
    ; Set XRAM pointer
    ld e, $00
    ld d, $40

    ; Set b for high XRAM pointer check
    ld c, $80

.read_zero_loop:
    ; Generate random byte, read from XRAM and check if byte is equal
    call rand
    ld h, a 
    ld a, [de]
    inc de
    cp a, h
    jr z, .skip_error_increment

    ; Setup error_result
    ld [error_result+1], a
    ld a, h
    ld [error_result], a

    ; Increment error count on screen
    push bc
    push de
    call increment_error_count
    pop de
    pop bc

    ; Check test abort
    ld a, [xram_test_abort]
    or a, a
    jr nz, .abort_test

.skip_error_increment:
    ; Check whether XRAM pointer still points to 0x4000-0x7FFF
    ld a, d
    cp a, c
    jr nz, .read_zero_loop

.abort_test:
    jp xram_test_loop.bank_routine_ret

increment_error_count:
    ; Setup pointer for noting exact error
    ld hl, error_count
    ld c, [hl]
    inc hl
    ld b, [hl]
    ld hl, xram_errors
    add hl, bc
    add hl, bc
    
    ; Save error to cart xram for later retrieval
    ld a, [error_result]
    ld [hl+], a
    ld a, [error_result+1]
    ld [hl], a

    ; Increment error count
    inc bc
    ld hl, error_count
    ld [hl], c
    inc hl
    ld [hl], b

    ; Check error count max and abort if exeeded
    ld a, (high(CART_RAM_SIZE) / 2)
    cp a, b
    jr nz, .skip_abort
    inc a
    ld [xram_test_abort], a
.skip_abort

    LCD_AWAIT_VBLANK

    ; Load error count screen location to hl
    LOAD_CELL_SCRN0_HL 4, 4

    ; Print error_count high byte
    ld a, [error_count+1]
    ld d, a
    call d2hex
    ld [hl], b
    inc hl
    ld [hl], c
    inc hl

    ; Print error_count low byte
    ld a, [error_count]
    ld d, a
    call d2hex
    ld [hl], b
    inc hl
    ld [hl], c

    ret

; Random number seed
xram_test_rand_seed:
    db $6E

; section "Cartridge RAM", sram[CART_RAM_BASE]
section "XRAM routines data", wram0

xram_errors:
    ds CART_RAM_SIZE

section "XRAM routines variables", hram

bank_counter:
    ds 2
bank_counter_update_skip:
    ds 1
error_count:
    ds 2
error_result:
    ds 2
xram_test_abort:
    ds 1